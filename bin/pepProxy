#!/usr/bin/env node

var proxy = require('../lib/fiware-orion-pep'),
    config = require('../config'),
    middlewareConfigs = {
        orion: {
            require: 'lib/plugins/orionPlugin',

            functions: [
               'extractCBAction'
            ]
        },
        keypass: {
            require: 'lib/plugins/keypassPlugin',

            functions: [
               'extractAction'
            ]
        },
        perseo: {
            require: 'lib/plugins/perseoPlugin',

            functions: [
               'extractAction'
            ]
        }
    };



function loadConfiguration() {
    var environmentValues = [
        'PROXY_PORT',
        'TARGET_HOST',
        'TARGET_PORT',
        'LOG_LEVEL',
        'ACCESS_HOST',
        'ACCESS_PORT',
        'ACCESS_PROTOCOL',
        'AUTHENTICATION_HOST',
        'AUTHENTICATION_PORT',
        'AUTHENTICATION_PROTOCOL',
        'PROXY_USERNAME',
        'PROXY_PASSWORD'
    ];

    for (var i = 0; i < environmentValues.length; i++) {
        if (process.env[environmentValues[i]]) {
            console.log('Changing %s to environment value: %s', environmentValues[i], process.env[environmentValues[i]]);
        }
    }

    if (process.env.PROXY_PORT) {
        config.resource.proxy.port = process.env.PROXY_PORT;
    }
    if (process.env.TARGET_HOST) {
        config.resource.original.host = process.env.TARGET_HOST;
    }
    if (process.env.TARGET_PORT) {
        config.resource.original.port = process.env.TARGET_PORT;
    }
    if (process.env.LOG_LEVEL) {
        config.logLevel = process.env.LOG_LEVEL;
    }
    if (process.env.ACCESS_HOST) {
        config.access.host = process.env.ACCESS_HOST;
    }
    if (process.env.ACCESS_PORT) {
        config.access.port = process.env.ACCESS_PORT;
    }
    if (process.env.ACCESS_PROTOCOL) {
        config.access.protocol = process.env.ACCESS_PROTOCOL;
    }
    if (process.env.AUTHENTICATION_HOST) {
        config.authentication.options.host = process.env.AUTHENTICATION_HOST;
    }
    if (process.env.AUTHENTICATION_PORT) {
        config.authentication.options.port = process.env.AUTHENTICATION_PORT;
    }
    if (process.env.AUTHENTICATION_PROTOCOL) {
        config.authentication.options.protocol = process.env.AUTHENTICATION_PROTOCOL;
    }
    if (process.env.PROXY_USERNAME) {
        config.authentication.user = process.env.PROXY_USERNAME;
    }
    if (process.env.PROXY_PASSWORD) {
        config.authentication.password = process.env.PROXY_PASSWORD;
    }
    if (process.env.COMPONENT_PLUGIN) {
        if (middlewareConfigs[process.env.COMPONENT_PLUGIN]) {
            config.middlewares = middlewareConfigs[process.env.COMPONENT_PLUGIN];
        } else {
            console.log('FATAL ERROR: Component plugin not found');
            process.exit();
        }
    }
}

loadConfiguration();

proxy.start(function(error, proxyObj) {
    var module;

    if (error) {
        process.exit();
    } else {
        console.log('Loading middlewares');
        module = require('../' + config.middlewares.require);

        for (var i in config.middlewares.functions) {
            proxyObj.middlewares.push(module[config.middlewares.functions[i]]);
        }

        console.log('Server started');
    }
});
