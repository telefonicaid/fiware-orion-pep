#!/usr/bin/env node

logger = require('logops');
var proxy = require('../lib/fiware-pep-steelskin'),
    config = require('../config'),
    middlewareConfigs = {
        orion: {
            require: 'lib/plugins/orionPlugin',

            functions: [
               'extractCBAction'
            ]
        },
        keypass: {
            require: 'lib/plugins/keypassPlugin',

            functions: [
               'extractAction'
            ]
        },
        perseo: {
            require: 'lib/plugins/perseoPlugin',

            functions: [
               'extractAction'
            ]
        },
         rest: {
             require: 'lib/plugins/restPlugin',

             functions: [
                'extractAction'
             ]
         }
    };

var proxyLocalObj;

function loadConfiguration() {
    var environmentValues = [
        'PROXY_PORT',
        'TARGET_HOST',
        'TARGET_PORT',
        'LOG_LEVEL',
        'ACCESS_DISABLE',
        'ACCESS_HOST',
        'ACCESS_PORT',
        'ACCESS_PROTOCOL',
        'ACCESS_ACCOUNT',
        'ACCESS_ACCOUNTFILE',
        'ACCESS_ACCOUNTMODE',
        'ADMIN_PORT',
        'AUTHENTICATION_HOST',
        'AUTHENTICATION_PORT',
        'AUTHENTICATION_PROTOCOL',
        'AUTHENTICATION_CACHE_PROJECTIDS',
        'AUTHENTICATION_CACHE_ROLES',
        'AUTHENTICATION_CACHE_USERS',
        'AUTHENTICATION_CACHE_VALIDATION',
        'PROXY_USERNAME',
        'PROXY_PASSWORD',
        'COMPONENT_PLUGIN',
        'COMPONENT_NAME',
        'BODY_LIMIT',
        'DISABLE_DOMAIN_MIDDLEWARE'
    ];

    for (var i = 0; i < environmentValues.length; i++) {
        if (process.env[environmentValues[i]]) {
            logger.info('Changing %s to environment value: %s', environmentValues[i], process.env[environmentValues[i]]);
        }
    }

    if (process.env.PROXY_PORT) {
        config.resource.proxy.port = process.env.PROXY_PORT;
    }
    if (process.env.TARGET_HOST) {
        config.resource.original.host = process.env.TARGET_HOST;
    }
    if (process.env.TARGET_PORT) {
        config.resource.original.port = process.env.TARGET_PORT;
    }
    if (process.env.ADMIN_PORT) {
        config.resource.proxy.adminPort = process.env.ADMIN_PORT;
    }
    if (process.env.LOG_LEVEL) {
        config.logLevel = process.env.LOG_LEVEL;
    }
    if (process.env.ACCESS_DISABLE) {
        config.access.disable = process.env.ACCESS_DISABLE == 'true';
    }
    if (process.env.ACCESS_HOST) {
        config.access.host = process.env.ACCESS_HOST;
    }
    if (process.env.ACCESS_PORT) {
        config.access.port = process.env.ACCESS_PORT;
    }
    if (process.env.ACCESS_PROTOCOL) {
        config.access.protocol = process.env.ACCESS_PROTOCOL;
    }
    if (process.env.ACCESS_ACCOUNT) {
        config.access.account = process.env.ACCESS_ACCOUNT == 'true';
    }
    if (process.env.ACCESS_ACCOUNTFILE) {
        config.access.accountFile = process.env.ACCESS_ACCOUNTFILE;
    }
    if (process.env.ACCESS_ACCOUNTMODE) {
        config.access.accountMode = process.env.ACCESS_ACCOUNTMODE;
    }
    if (process.env.AUTHENTICATION_HOST) {
        config.authentication.options.host = process.env.AUTHENTICATION_HOST;
    }
    if (process.env.AUTHENTICATION_PORT) {
        config.authentication.options.port = process.env.AUTHENTICATION_PORT;
    }
    if (process.env.AUTHENTICATION_PROTOCOL) {
        config.authentication.options.protocol = process.env.AUTHENTICATION_PROTOCOL;
    }
    if (process.env.AUTHENTICATION_CACHE_PROJECTIDS) {
        config.authentication.cacheTTLs.projectIds = process.env.AUTHENTICATION_CACHE_PROJECTIDS;
    }
    if (process.env.AUTHENTICATION_CACHE_ROLES) {
        config.authentication.cacheTTLs.roles = process.env.AUTHENTICATION_CACHE_ROLES;
    }
    if (process.env.AUTHENTICATION_CACHE_USERS) {
        config.authentication.cacheTTLs.users = process.env.AUTHENTICATION_CACHE_USERS;
    }
    if (process.env.AUTHENTICATION_CACHE_VALIDATION) {
        config.authentication.cacheTTLs.validation = process.env.AUTHENTICATION_CACHE_VALIDATION;
    }
    if (process.env.PROXY_USERNAME) {
        config.authentication.user = process.env.PROXY_USERNAME;
    }
    if (process.env.PROXY_PASSWORD) {
        config.authentication.password = process.env.PROXY_PASSWORD;
    }
    if (process.env.COMPONENT_NAME) {
        config.componentName = process.env.COMPONENT_NAME;
    }
    if (process.env.COMPONENT_PLUGIN) {
        if (middlewareConfigs[process.env.COMPONENT_PLUGIN]) {
            if (!process.env.COMPONENT_NAME) {
                config.componentName = process.env.COMPONENT_PLUGIN;
            }

            config.middlewares = middlewareConfigs[process.env.COMPONENT_PLUGIN];
        } else {
            logger.info('FATAL ERROR: Component plugin not found');
            process.exit();
        }
    }
    if (process.env.BODY_LIMIT) {
        config.bodyLimit = process.env.BODY_LIMIT;
    }
}

loadConfiguration();

proxy.start(function(error, proxyObj) {
    var module;
    proxyLocalObj = proxyObj;
    if (error) {
        process.exit();
    } else {
        logger.info('Loading middlewares');
        module = require('../' + config.middlewares.require);

        for (var i in config.middlewares.functions) {
            proxyObj.middlewares.push(module[config.middlewares.functions[i]]);
        }

        logger.info('Server started');
    }
});


function handleShutdown(signal) {
    logger.info('Received %s, starting shutdown processs', signal);
    proxy.stop(proxyLocalObj,
        (err) => {
        if (err) {
            logger.info(err);
            return process.exit(1);
        }
        return process.exit(0);
    });
}

process.on('SIGINT', handleShutdown);
process.on('SIGTERM', handleShutdown);
process.on('SIGHUP', handleShutdown);

