#!/bin/bash
#
# pepProxy         Start/Stop the PEP Proxy
#
# chkconfig: 2345 99 60
# description: Orion Policy Enforcement Point
### BEGIN INIT INFO
# Provides: pepProxy
# Required-Start: $local_fs $syslog
# Required-Stop: $local_fs $syslog
# Default-Start:  345
# Default-Stop: 90
# Short-Description: run pepProxy
# Description: The Policy Enforcement Point is part of the Access Control system of
# the Fiware Platform. Its main purpose is to filter the access to the Context Broker
# based on policies defined in the Access Control system. The PEP Proxy validates all
# the incoming requests against the Access Control.
### END INIT INFO

# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Policy Enforcement Point.
#
# Orion Policy Enforcement Point is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Policy Enforcement Point is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Policy Enforcement Point. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es


. /etc/rc.d/init.d/functions

PARAM=$1
NAME=pepProxy
EXECUTABLE=bin/pepProxy
PROXY_PATH=/opt/pepProxy
PIDFILE=$PROXY_PATH/$NAME.pid
LOG_PATH=/var/log/pepProxy/${NAME}.log

# Load the environment
if [[ -f /etc/sysconfig/${NAME} ]]; then
    set -a
    . /etc/sysconfig/${NAME}
else
   echo "Configuration file /etc/sysconfig/${NAME} not found"
   echo "Please read the documentation for information on setting up ${NAME}"
   exit 1
fi

pepproxy_start()
{
    printf "%-50s" "Starting ${NAME}..."
    cd $PROXY_PATH
    if [[ -x ${EXECUTABLE} ]]; then
        cd $PROXY_PATH
        su $PROXY_USER -p -c "cd $PROXY_PATH; nohup ${EXECUTABLE} &>> $LOG_PATH & echo \$! > $PIDFILE"
        echo "Success"
    else
        printf "%s\n" "Fail - missing ${EXECUTABLE} executable"
        exit 1
    fi
}

pepproxy_stop()
{
    printf "%-50s" "Stopping $NAME..."
    if [ -f "${PIDFILE}" ]; then
        kill -9 $(cat ${PIDFILE})
        rm -f ${PIDFILE}
        printf "%s\n" "$(success)"
    else
        printf "%s\n" "$(failure)"
    fi
}

pepproxy_status()
{
    status -p ${PIDFILE} ${EXECUTABLE}
}

case ${PARAM} in

    'start')
        echo "Starting..."
        status -p ${PIDFILE} ${EXECUTABLE} && exit 0
        pepproxy_start
        ;;

    'stop')
        echo "Stopping..."
        status -p ${PIDFILE} ${EXECUTABLE} || exit 0
        pepproxy_stop
        ;;

    'restart')
        pepproxy_stop
        pepproxy_start
        ;;

    'status')
        pepproxy_status
        ;;

esac
