#!/bin/bash
#
# pepProxy         Start/Stop the PEP Proxy
#
# chkconfig: 2345 99 60
# description: Orion Policy Enforcement Point
### BEGIN INIT INFO
# Provides: pepProxy
# Required-Start: $local_fs $syslog
# Required-Stop: $local_fs $syslog
# Default-Start:  345
# Default-Stop: 90
# Short-Description: run pepProxy
# Description: The Policy Enforcement Point is part of the Access Control system of
# the Fiware Platform. Its main purpose is to filter the access to the Context Broker
# based on policies defined in the Access Control system. The PEP Proxy validates all
# the incoming requests against the Access Control.
### END INIT INFO

# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Policy Enforcement Point.
#
# Orion Policy Enforcement Point is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Policy Enforcement Point is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Policy Enforcement Point. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es


. /etc/rc.d/init.d/functions

PARAM=${1}
INSTANCE=${2}
COMPONENT_NAME="pepProxy"
COMPONENT_PATH="/opt/${COMPONENT_NAME}"
COMPONENT_EXE="${COMPONENT_PATH}/bin/${COMPONENT_NAME}"
COMPONENT_CONF_PATH="/etc/${COMPONENT_NAME}.d"
COMPONENT_PREFIX="pepproxy_"

component_start()
{

    local result=0
    local run_instance=${1}

    if [[ ! -x ${COMPONENT_EXE} ]]; then
        printf "%s\n" "Fail - missing ${COMPONENT_EXE} executable"
        exit 1
    fi

    if [[ -z ${run_instance} ]]; then
        list_instances="${COMPONENT_CONF_PATH}/${COMPONENT_PREFIX}*.conf"
    else
        list_instances="${COMPONENT_CONF_PATH}/${COMPONENT_PREFIX}${run_instance}.conf"
    fi

    if [[ $(ls -l ${list_instances} 2> /dev/null | wc -l) -eq 0 ]]; then
        if [[ ${run_instance} == "" ]]; then
            printf "%s\n" "There aren't any instance of PEP Proxy configured. Refer to file ${COMPONENT_CONF_PATH}/README.md for further information."
        else
            printf "%s\n" "There aren't any instance of PEP Proxy configured with the name ${run_instance}. Refer to file ${COMPONENT_CONF_PATH}/README.md for further information."
        fi
        return 1
    fi

    for _instance in ${list_instances}
    do
    
        local NAME
        NAME=${_instance%.conf}
        NAME=${NAME#*${COMPONENT_PREFIX}}

        set -a
        source ${_instance}

        local LOG_FILE="/var/log/${COMPONENT_NAME}/${COMPONENT_PREFIX}${NAME}.log"
        local PID_FILE="/var/run/${COMPONENT_NAME}/${COMPONENT_PREFIX}${NAME}.pid"

        printf "%s" "Starting PEP Proxy ${NAME}...  "

        status -p ${PID_FILE} ${COMPONENT_EXE} &> /dev/null 
        if [[ ${?} -eq 0 ]]; then
            printf "%s\n" " Already running, skipping $(success)"
            continue
        fi

        su $PROXY_USER -p -c "cd ${COMPONENT_PATH}; ${COMPONENT_EXE} &>> ${LOG_FILE} & echo \$! > ${PID_FILE}"
        sleep 2 # some cortesy time to process startup or die
        local PID=$(cat ${PID_FILE})
        local PEP_PID=$(ps -ef | grep -v "grep" | grep "${PID:-not_found}")
        if [[ -z ${PEP_PID} ]]; then
            printf "%s\n" "$(failure)"
            result=$((${result}+1))
            rm -f ${PID_FILE} &> /dev/null 
        else
            chown ${COMPONENT_USER}:${COMPONENT_USER} ${PID_FILE}
            printf "%s\n" "$(success)"
        fi

    done

    return ${result}
    
}

component_stop()
{
    local result=0
    local run_instance=${1}


    if [[ -z ${run_instance} ]]; then
        list_run_instances="/var/run/${COMPONENT_NAME}/${COMPONENT_PREFIX}*.pid"
    else
        list_run_instances="/var/run/${COMPONENT_NAME}/${COMPONENT_PREFIX}${run_instance}.pid"
    fi

    if [[ $(ls -l ${list_run_instances} 2> /dev/null | wc -l) -eq 0 ]]; then
        printf "%s\n" "There aren't any instance of PEP Proxy ${run_instance} running $(success)"
        return 0
    fi

    for _instance in ${list_run_instances}
    do

        local NAME
        NAME=${_instance%.pid}
        NAME=${NAME#*${COMPONENT_PREFIX}}

        printf "%s" "Stopping PEP Proxy ${NAME}..."

        local RUN_PID=$(cat ${_instance})
        kill ${RUN_PID}  &> /dev/null
        sleep 2 # time to die properly
        local KILLED_PID=$(ps -ef | grep ${RUN_PID} | grep -v grep | awk '{print $2}')
        if [[ -z ${KILLED_PID} ]]; then
            printf "%s\n" "$(success)"
        else
            printf "%s\n" "$(failure)"
            result=$((${result}+1))
        fi

        rm -f ${_instance} &> /dev/null 

    done
    return ${result}
}

component_status()
{
    local result=0
    local run_instance=${1}

    if [[ -z ${run_instance} ]]; then
        list_run_instances="/var/run/${COMPONENT_NAME}/${COMPONENT_PREFIX}*.pid"
    else
        list_run_instances="/var/run/${COMPONENT_NAME}/${COMPONENT_PREFIX}${run_instance}.pid"
    fi

    if [[ $(ls -l ${list_run_instances} 2> /dev/null | wc -l) -eq 0 ]]; then
        printf "%s\n" "There aren't any instance of PEP Proxy ${run_instance} running."
        return 1
    fi

    for _instance in ${list_run_instances}
    do

        local NAME
        NAME=${_instance%.pid}
        NAME=${NAME#*${COMPONENT_PREFIX}}

        printf "%s\n" "PEP Proxy ${NAME} status..."
        status -p ${_instance} ${NODE_EXEC}
        result=$((${result}+${?}))

    done

    return ${result}
}

case ${PARAM} in

    'start')
        component_start ${INSTANCE}
        ;;

    'stop')
        component_stop ${INSTANCE}
        ;;

    'restart')
        component_stop ${INSTANCE}
        component_start ${INSTANCE}
        ;;

    'status')
        component_status ${INSTANCE}
        ;;

esac
